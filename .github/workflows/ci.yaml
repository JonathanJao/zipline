name: Zipline CI

on:  # TMP: change workflow to run on push to master
  push:
    branches:
      - gh-actions-ci

jobs:

  build-and-test:

    runs-on: macos-latest

    strategy:
      fail-fast: true
      matrix:
        python: [2.7, 3.5]
        pandas: ['old', 'new']
        exclude:
          - python: 2.7
            pandas: 'new'
        include:
          - pandas: 'old'
            NUMPY_VERSION: 1.11.3
            PANDAS_VERSION: 0.18.1
            SCIPY_VERSION: 0.17.1
          - pandas: 'new'
            NUMPY_VERSION: 1.14.1
            PANDAS_VERSION: 0.22.0
            SCIPY_VERSION: 1.0.0
            PANDAS_DATAREADER_VERSION: 0.4.0
            DASK_VERSION: 0.17.1


    name: py ${{ matrix.python }}/${{ matrix.pandas }} pandas

    steps:

      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Cache pip files
        uses: actions/cache@v1
        with:
          path: ~/.cache/.pip
          key: ${{ matrix.python }}-pip

      - name: Install dependencies
        env:
          ANACONDA_TOKEN: ${{ secrets.AnacondaToken }}
          TRAVIS_OS_NAME: osx
          CONDA_ROOT_PYTHON_VERSION: "2.7"
          NUMPY_VERSION: ${{ matrix.NUMPY_VERSION }}
          PANDAS_VERSION: ${{ matrix.PANDAS_VERSION }}
          SCIPY_VERSION: ${{ matrix.SCIPY_VERSION }}
        run: |
          if [[ matrix.PANDAS_DATAREADER_VERSION ]]; then export PANDAS_DATAREADER_VERSION=${{ matrix.PANDAS_DATAREADER_VERSION }}; fi
          if [[ matrix.DASK_VERSION ]]; then export DASK_VERSION=${{ matrix.DASK_VERSION }}; fi

          source ./ci/travis/install_miniconda.sh
          source ./ci/travis/overwrite_requirements.sh
          cat etc/requirements.txt

          conda info -a
          conda install conda=4.3.30 conda-build=3.0.28 anaconda-client=1.6.3 --yes -q
          conda list

          TALIB_VERSION=$(cat ./etc/requirements_talib.txt | sed "s/TA-Lib==\(.*\)/\1/")
          CERTIFI_VERSION=$(cat ./etc/requirements.txt | grep "certifi" | sed "s/certifi==\(.*\)/\1/")
          IFS='.' read -r -a NPY_VERSION_ARR <<< "$NUMPY_VERSION"
          CONDA_NPY=${NPY_VERSION_ARR[0]}${NPY_VERSION_ARR[1]}
          CONDA_PY=${{ matrix.python }}
          
          if [[ "$TRAVIS_SECURE_ENV_VARS" = "true" && "$TRAVIS_BRANCH" = "master" && "$TRAVIS_PULL_REQUEST" = "false" ]]; then DO_UPLOAD="true"; else DO_UPLOAD="false"; fi

          for recipe in $(ls -d conda/*/ | xargs -I {} basename {}); do
            if [[ "$recipe" = "zipline" ]]; then continue; fi

            conda build conda/$recipe --python=$CONDA_PY --numpy=$CONDA_NPY --skip-existing --old-build-string -c quantopian -c quantopian/label/ci
            RECIPE_OUTPUT=$(conda build conda/$recipe --python=$CONDA_PY --numpy=$CONDA_NPY --old-build-string --output)
            if [[ -f "$RECIPE_OUTPUT" && "$DO_UPLOAD" = "true" ]]; then anaconda -t $ANACONDA_TOKEN upload "$RECIPE_OUTPUT" -u quantopian --label ci; fi
          done

          python -c 'import os,sys,fcntl; flags = fcntl.fcntl(sys.stdout, fcntl.F_GETFL); fcntl.fcntl(sys.stdout, fcntl.F_SETFL, flags&~os.O_NONBLOCK);'

          conda create -n testenv --use-local --yes -c quantopian -c quantopian/label/ci pip python=${{ matrix.python }} numpy=${{ matrix.NUMPY_VERSION }} pandas=${{ matrix.PANDAS_VERSION }} scipy=${{ matrix.SCIPY_VERSION }} ta-lib=$TALIB_VERSION libgfortran=3.0 certifi=$CERTIFI_VERSION

          export PATH="/usr/share/miniconda/bin:$PATH" && source activate /home/runner/miniconda/envs/testenv

          TRAVIS='' EXTERNAL_REQUIREMENTS='coveralls' etc/dev-install --cache-dir="$HOME/.cache/.pip/pip_np$CONDA_NPY"

          pip freeze | sort

      - name: Linting/Tests
        run: |
          export PATH="/usr/share/miniconda/bin:$PATH"
          source activate /home/runner/miniconda/envs/testenv
          flake8 zipline tests
          nosetests --with-coverage
          source deactivate

          conda install conda-build=3.0.28 --yes -q

          CONDA_NPY=${NPY_VERSION_ARR[0]}${NPY_VERSION_ARR[1]}
          CONDA_PY=${{ matrix.python }}

          git fetch --tags
          exec 3>&1; ZP_OUT=$(conda build conda/zipline --python=$CONDA_PY --numpy=$CONDA_NPY -c quantopian -c quantopian/label/ci | tee >(cat - >&3))
          ZP_OUTPUT=$(echo "$ZP_OUT" | grep "anaconda upload " | awk '{print $NF}')
          if [ -z "$ZP_OUTPUT" ]; then exit 1; fi
          # test that we can conda install zipline in a new env
          conda create -n installenv --yes -q --use-local python=${{ matrix.python }} numpy=${{ matrix.NUMPY_VERSION }} zipline -c quantopian -c https://conda.anaconda.org/quantopian/label/ci
          if [[ "$DO_UPLOAD" = "true" ]]; then anaconda -t $ANACONDA_TOKEN upload $ZP_OUTPUT -u quantopian --label ci; fi

      - name: Coveralls
        run: | 
          export PATH="/usr/share/miniconda/bin:$PATH"
          source activate /home/runner/miniconda/envs/testenv
          coveralls
